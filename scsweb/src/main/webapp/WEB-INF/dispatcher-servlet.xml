<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<context:annotation-config />
	<!-- This declaration will cause Spring to locate every @Component, @Repository 
		and @Service in your application. In practical terms this allows you to write 
		a POJO and then simply annotate the new POJO as an @Service and Spring will 
		automatically detect, instantiate and dependency inject your service at startup 
		time. Importantly, you can then also have your new service injected into 
		any other class that requires it simply by declaring a field for your service 
		inside the relying class and Spring will inject it. Note that an exclude 
		filter is declared to avoid instantiating your @Controller classes, as these 
		should be instantiated by a web tier application context. Refer to web.xml 
		for more details about the web tier application context setup services. Furthermore, 
		this turns on @Autowired, @PostConstruct etc support. These annotations allow 
		you to use common Spring and Java Enterprise Edition annotations in your 
		classes without needing to do any special configuration. The most commonly 
		used annotation is @Autowired, which instructs Spring to dependency inject 
		an object into your class. -->
	<context:component-scan base-package="com.inspiracode.nowgroup.scspro">
		<context:exclude-filter expression="org.springframework.stereotype.Controller"
			type="annotation" />
		<context:exclude-filter expression="org.springframework.stereotype.Repository"
			type="annotation" />
	</context:component-scan>

	<beans:import resource="spring/spring-datasource.xml" />
	<beans:import resource="spring/spring-web-scspro.xml" />
	<beans:import resource="spring/spring-hibernate.xml" />

	<!-- This will ensure that hibernate or jpa exceptions are automatically 
		translated into Spring's generic DataAccessException hierarchy -->
	<beans:bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- This will automatically locate any and all property files you have 
		within your classpath, provided they fall under the META-INF/spring directory. 
		The located property files are parsed and their values can then be used within 
		application context files in the form of ${propertyKey}. -->
	<context:property-placeholder location="classpath*:META-INF/spring/*.properties" />
</beans:beans>